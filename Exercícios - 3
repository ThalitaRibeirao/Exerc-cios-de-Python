{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Exercícios - 3","provenance":[{"file_id":"1jmfaWdOjk4jZFwhl81QJjrUXI1k9Jio6","timestamp":1617861803859},{"file_id":"1Rm-WFLTvNFWBj_3Tproex2qBjftGzjbL","timestamp":1617647609970}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"pn-A9yf2jdK2"},"source":["# Quarta semana"]},{"cell_type":"markdown","metadata":{"id":"nXUdG4FdUj3J"},"source":["## Blocos de repetição (loops)"]},{"cell_type":"markdown","metadata":{"id":"cqoEj0JGUj3W"},"source":["1.\n","Escreva um programa que lê um **número natural de n dígitos** e mostra a soma dos algarismos do número.  \n","Por exemplo, se o usuário digitar 3141, seu programa deve imprimir $3 + 1 + 4 + 1 = 9$.\n","\n","**Dica:** lembre-se dos operadores ```//``` divisão inteira e ```%``` resto da divisão"]},{"cell_type":"code","metadata":{"id":"h1hhvICRUj3X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617682846254,"user_tz":180,"elapsed":3464,"user":{"displayName":"Thalita Silva","photoUrl":"","userId":"16118266009378316818"}},"outputId":"2214c563-4c73-45ee-fc02-5b261cfa44bc"},"source":["nat = input (\"Digite um número natural: \")\n","quantidade = len (list (nat))\n","total = 0\n","while quantidade >= 1:\n","  base = 10 ** quantidade\n","  base2 = 10 ** (quantidade - 1)\n","  algarismo = (((int (nat)) % base) - ((int (nat)) % base2)) / (10 ** (quantidade - 1))\n","  total += algarismo\n","  quantidade -= 1\n","print (total)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Digite um número natural: 3141\n","9.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0DB9ub-rUj3Z"},"source":["2.\n","O Cadastro de Pessoas Físicas (CPF) é um documento da Receita Federal do Brasil criado em\n","1968 que identifica unicamente pessoas naturais. Cada pessoa inscrita no registro é\n","identificada por um número único de 11 dígitos decimais.\n","O formato do número de identificação consiste no agrupamento dos 9 primeiros dígitos,\n","normalmente separados de 3 em 3 por um ponto (.), seguidos por um hífen (-) e os 2 últimos\n","dígitos, chamados dígitos verificadores. Por exemplo: 123.456.789-10, sendo também\n","possíveis as formas somente com o hífen (123456789-10) ou somente com os dígitos\n","(12345678910).\n","\n","**A)** Por meio do número de um CPF é possível identificar de qual estado o documento foi\n","emitido. Para tal, basta verificar o 9º dígito do documento (antes dos dígitos\n","verificadores). Cada estado (ou conjunto de estados) possui seu número\n","correspondente. Por exemplo, o CPF 123.456.789-10 é do estado do Paraná ou de\n","Santa Catarina.\n","\n","\n","Código de Área | Estados representantes\n","--- | ---\n","0 | Rio Grande do Sul\n","1 |Distrito Federal, Goiás, Mato Grosso do Sul e Tocantins\n","2 |Pará, Amazonas, Acre, Amapá, Rondônia e Roraima\n","3 |Ceará, Maranhão e Piauí\n","4 | Pernambuco, Rio Grande do Norte, Paraíba e Alagoas\n","5 | Bahia e Sergipe\n","6 | Minas Gerais\n","7 | Rio de Janeiro e Espírito Santo\n","8 | São Paulo\n","9 | Paraná e Santa Catarina\n","\n","Neste exercício, deve fazer um programa que receba uma lista de CPFs seguida por 0 e diz se esse CPF foi emitido de São Paulo ou não.\n","Importante: Os CPFs recebidos pelo seu programa estarão na forma sem pontos ou\n","hífen e também devolverá os CPFs desta forma.\n","\n","exemplo:\n"," \n","    ```\n","    >digite um cpf: 13023992843 \n","    output: sim\n","    >digite um cpf: 84352787868\n","    output: sim \n","    >digite um cpf: 21723356492\n","    output: não\n","    >digite um cpf: 35907277807 \n","    output: sim\n","    >digite um cpf: 0 \n","    ```\n"]},{"cell_type":"code","metadata":{"id":"KZeGf1QFUj3a","colab":{"base_uri":"https://localhost:8080/","height":552},"executionInfo":{"status":"error","timestamp":1617858742900,"user_tz":180,"elapsed":813941,"user":{"displayName":"Thalita Silva","photoUrl":"","userId":"16118266009378316818"}},"outputId":"3f860fed-44b8-4e3c-9fa5-d28c039fee0d"},"source":["i = 0\n","while i >= 0:\n","  cpf = input (\"Digite um CPF, sem pontos ou traços: \")\n","  if int (cpf) == 0:\n","    break\n","  lista = list (cpf)\n","  verificador = int (lista [8])\n","  if len (lista) != 11:\n","    print (\"Digite um CPF Válido\")\n","  elif verificador == 8:\n","    print (\"Sim\")\n","  else:\n","    print (\"Não\")\n","  \n","  i += 1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Digite um CPF, sem pontos ou traços: 21723356492\n","Não\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    582\u001b[0m         \"\"\"\n\u001b[0;32m--> 583\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    584\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-ff44ac9a5f6d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m   \u001b[0mcpf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"Digite um CPF, sem pontos ou traços: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcpf\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 704\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    705\u001b[0m         )\n\u001b[1;32m    706\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"WqA3xvdlUj3a"},"source":["**B)** Os dois últimos dígitos do CPF (após o hífen) são chamados de dígitos verificadores\n","pois são capazes de verificar se o CPF fornecido é real ou falso. Os números são\n","determinados a partir dos outros, de acordo com a seguinte forma:\n","\n","*1º Dígito Verificador* (10º número): Para definir este número somamos os 9 algarismos\n","anteriores, usando como pesos a sequência 10, 9, 8, … , 3, 2. Em seguida, dividimos a soma por 11 e pegamos seu resto. Se o resto for 0 ou 1, o dígito será 0. Caso contrário,\n","o dígito será o resultado de 11 - resto.\n","\n","\n","Por exemplo, com o número 196251015:\n","(1 x 10 + 9 x 9 + 6 x 8 + 2 x 7 + 5 x 6 + 1 x 5 + 0 x 4 + 1 x 3 + 5 x 2) mod 11 = 3\n","Portanto o 1º DV é 11 - 3 = 8.\n","\n","\n","*2º Dígito Verificador* (11º número): Para definir este número, somamos os 10\n","algarismos anteriores, usando como pesos a sequência 11, 10, 9, … , 3, 2. Em seguida,\n","dividimos a soma por 11 e pegamos seu resto. Se o resto for 0 ou 1, o dígito será 0.\n","Caso contrário, o dígito será o resultado de 11 - resto, assim como foi feito para o dígito\n","anterior.\n","\n","\n","Mantendo o mesmo exemplo, agora com o 1ºDV: 1962510158:\n","(1 x 11 + 9 x 10 + 6 x 9 + 2 x 8 + 5 x 7 + 1 x 6 + 0 x 5 + 1 x 4 + 5 x 3 + 8 x 2) mod 11 = 5\n","Portanto, o 2º DV será 11 - 5 = 6, com o CPF completo sendo 19625101586.\n","Neste exercício, deve ser feito um programa que recebe um CPF e responde se este se\n","trata de um CPF verdadeiro ou não, utilizando-se do método para a obtenção dos\n","dígitos verificadores.\n","\n","\n","OBS: Esse código deve receber os CPFs tanto na forma de inteiro (int) quando na forma\n","de string (str).\n","\n","\n","Exemplo:\n","\n","Input | Output\n","--- | ---\n","63662854546 |True\n","13360069510 | True\n","133600695 | False\n","34821223503 | True\n"]},{"cell_type":"code","metadata":{"id":"Blc1g-jJfUpu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617861514802,"user_tz":180,"elapsed":2610,"user":{"displayName":"Thalita Silva","photoUrl":"","userId":"16118266009378316818"}},"outputId":"48b268ca-82da-436f-aa14-83f458520d43"},"source":["cpf = input (\"Qual o CPF que deseja analisar? \")\n","lista = list (cpf)\n","quantidade = len (lista)\n","# Esses são os controladores #\n","i1 = 10\n","total1 = 0\n","i2 = 11\n","total2 = 0\n","# Verifica se o CPF inserido é válido #\n","if quantidade != 11:\n","  final = False\n","# Calculadora do dígito 10  e 11#\n","else:\n","  for x in range (0, 9, 1):\n","    verificador = int (lista [x])\n","    total1 += (verificador*i1)\n","    total2 += (verificador*i2)\n","    i1 -= 1\n","    i2 -=1\n","  resto = total1%11\n","  if resto <= 1:\n","    digito10 = 0\n","  else:\n","    digito10 = 11 - resto\n","  total2 += (digito10*2)\n","  resto2 = total2%11\n","  if resto2 <= 1:\n","    digito11 = 0\n","  else: \n","    digito11 = 11 - resto2\n","  # Verificador do dígito CPF #\n","  a = int (lista [9]) == digito10\n","  b = int (lista [10]) == digito11\n","  if  a and b:\n","    final = True\n","  else:\n","    final = False\n","print (final)\n","\n","\n","  "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Qual o CPF que deseja analisar? 60065498755\n","True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jGPiydfDUj3b"},"source":["**C)** Neste exercício, deve ser criado um programa que gera CPFs aleatórios válidos,\n","seguindo as regras para os CPFs estabelecidas no item B.\n","OBS: você pode utilizar o seu código que foi desenvolvido no item B.\n","**Dica:** existe uma função no python que gera números pseudo aleatórios. Ela se chama randint e retorna um número aleatório entre o primeiro parâmetro e o segundo. Por exemplo randint(1,3) retorna um número aleatório que pode ser 1, 2 ou 3.\n","\n","Para usá-la temos que importar da biblioteca random, rode o código abaixo para importá-la \n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"m3x2inkm1qei","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617861504589,"user_tz":180,"elapsed":655,"user":{"displayName":"Thalita Silva","photoUrl":"","userId":"16118266009378316818"}},"outputId":"69e1d129-d5b8-4fa6-d998-26c3104b493a"},"source":["from random import randint\n","i = 0\n","while i >=0:\n","  i1 = 10\n","  total1 = 0\n","  i2 = 11\n","  total2 = 0\n","  num_aleatorio = randint (10000000000, 99999999999)\n","  lista = list (str (num_aleatorio))\n","  for x in range (0, 9, 1):\n","    verificador = int (lista [x])\n","    total1 += (verificador*i1)\n","    total2 += (verificador*i2)\n","    i1 -= 1\n","    i2 -= 1\n","  resto = total1%11\n","  if resto <= 1:\n","    digito10 = 0\n","  else:\n","    digito10 = 11 - resto\n","  total2 += digito10*2\n","  resto2 = total2%11\n","  if resto2 <= 1:\n","    digito11 = 0\n","  else: \n","    digito11 = 11 - resto2\n","  a = int (lista [9]) == digito10\n","  b = int (lista [10]) == digito11\n","  if  a and b:\n","    print (\"O CPF gerado é: %i\" %num_aleatorio)\n","    break\n","  i += 1\n","\n","\n","  \n","  \n","  \n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["O CPF gerado é: 60065498755\n"],"name":"stdout"}]}]}